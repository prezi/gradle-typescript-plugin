group = 'com.prezi.typescript'
description = "Gradle TypeScript plugin"

if (hasProperty("release")) {
	version = [ "git", "describe", "--match", "[0-9]*", "--dirty"].execute().text.trim()
} else {
	version = [ "git", "describe", "--match", "[0-9]*", "--abbrev=0"].execute().text.trim() + "-SNAPSHOT"
}

task version << {
	println "Version: ${version}"
}

def sonatype = hasProperty("sonatype")
def signArtifacts = sonatype || hasProperty("sign")

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'idea'

sourceCompatibility = "1.6"
targetCompatibility = "1.6"

repositories {
	mavenCentral()
}

dependencies {
	compile gradleApi()
	compile localGroovy()
	testCompile "org.spockframework:spock-core:0.7-groovy-1.8"
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
	classifier = "javadoc"
	from "build/docs/groovydoc"
}

task sourcesJar(type: Jar) {
	from sourceSets.main.allSource
	classifier = "sources"
}

jar {
	from "LICENSE.txt"
}

artifacts {
	archives jar
	archives groovydocJar
	archives sourcesJar
}

uploadArchives {
	repositories {
		mavenDeployer {
			pom.project {
				url "http://github.com/prezi/gradle-typescript-plugin"
				name project.name
				description project.description

				scm {
					url "scm:git@github.com:prezi/gradle-typescript-plugin.git"
					connection "scm:git@github.com:prezi/gradle-typescript-plugin.git"
					developerConnection "scm:git@github.com:prezi/gradle-typescript-plugin.git"
				}

				licenses {
					license {
						name "The Apache Software License, Version 2.0"
						url "http://www.apache.org/licenses/LICENSE-2.0.txt"
						distribution "repo"
					}
				}

				developers {
					developer {
						id "lptr"
						name "Lorant Pinter"
					}
					developer {
						id "gidapataki"
						name "Gida Pataki"
					}
				}
			}

			if (sonatype) {
				repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
					def user = project.getProperty("sonatypeUsername")
					def password = project.getProperty("sonatypePassword")
					authentication(userName: user, password: password)
				}
				snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
					def user = project.getProperty("sonatypeUsername")
					def password = project.getProperty("sonatypePassword")
					authentication(userName: user, password: password)
				}
			} else if (project.hasProperty("nexusUser") && project.hasProperty("nexusPassword")) {
				def user = project.getProperty("nexusUser")
				def password = project.getProperty("nexusPassword")
				repository(url: "https://artifactory.prezi.com/plugins-release-local/") {
					authentication(userName: user, password: password)
				}
				snapshotRepository(url: "https://artifactory.prezi.com/plugins-snapshot-local/") {
					authentication(userName: user, password: password)
				}
			}
		}
	}
}

if (signArtifacts) {
	apply plugin: "signing"

	signing {
		sign configurations.archives
	}

	uploadArchives {
		repositories {
			mavenDeployer {
				beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
			}
		}
	}
}

tasks.withType(Upload).all { it.dependsOn "check" }
